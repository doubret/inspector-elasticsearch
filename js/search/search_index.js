var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/ElasticsearchMetricReporterOption.html",[0,0.775,1,1.281]],["body/interfaces/ElasticsearchMetricReporterOption.html",[0,0.664,1,1.392,2,0.586,3,0.594,4,0.204,5,0.337,6,0.436,7,1.909,8,2.017,9,1.909,10,1.673,11,1.086,12,1.034,13,1.692,14,1.692,15,2.548,16,1.824,17,2.276,18,1.692,19,1.709,20,0.101,21,1.086,22,1.895,23,1.878,24,1.121,25,1.529,26,3.173,27,2.116,28,1.585,29,1.387,30,0.945,31,0.702,32,1.756,33,1.031,34,0.961,35,0.586,36,2.276,37,1.636,38,2.548,39,2.548,40,2.548,41,1.801,42,2.276,43,1.801,44,1.034,45,2.107,46,1.034,47,0.586,48,1.034,49,2.276,50,1.034,51,2.175,52,2.548,53,1.387,54,0.263,55,0.925,56,0.436,57,0.436,58,1.636,59,0.436,60,0.769,61,0.436,62,0.436,63,2.107,64,1.692,65,2.175,66,1.419,67,2.659,68,3.509,69,1.673,70,1.034,71,0.586,72,0.337,73,2.805,74,0.594,75,2.898,76,3.268,77,2.846,78,0.586,79,0.436,80,0.586,81,0.586,82,0.586,83,3.481,84,1.034,85,0.586,86,2.491,87,0.769,88,0.436,89,0.436,90,0.594,91,1.244,92,0.769,93,0.436,94,0.594,95,0.436,96,0.436,97,0.436,98,0.436,99,0.586,100,1.244,101,1.244,102,0.586,103,1.034,104,1.034,105,0.586,106,1.895,107,1.419,108,0.586,109,0.586,110,0.586,111,0.586,112,0.586,113,0.586,114,0.436,115,0.436,116,0.436,117,0.586,118,1.567,119,1.034,120,1.034,121,0.586,122,0.586,123,0.586,124,1.909,125,0.586,126,0.586,127,1.034,128,0.586,129,1.387,130,1.034,131,1.034,132,1.034,133,1.034,134,1.034,135,1.034,136,1.034,137,1.034,138,1.034,139,1.034,140,1.034,141,1.034,142,1.034,143,1.034,144,1.034,145,1.034,146,1.034,147,1.034,148,1.034,149,1.034,150,0.586,151,0.586,152,1.034,153,0.586,154,1.034,155,0.586,156,1.034,157,0.586,158,1.034,159,0.586,160,0.586,161,0.586,162,0.586,163,0.586,164,0.586,165,0.586,166,0.586,167,2.107,168,2.421,169,0.586,170,0.586,171,0.436,172,0.586,173,0.586,174,0.586,175,0.586,176,0.586,177,1.673,178,0.586,179,1.308,180,0.482,181,0.586,182,1.387,183,1.034,184,1.387,185,0.586,186,0.586,187,0.337,188,0.586,189,0.586,190,0.586,191,0.586,192,0.436,193,0.586,194,0.586,195,1.387,196,0.586,197,0.586,198,0.586,199,1.909,200,0.586,201,0.586,202,0.586,203,0.586,204,0.586,205,0.586,206,1.034,207,2.996,208,2.996,209,0.045,210,1.034,211,0.586,212,3.223,213,1.034,214,0.586,215,0.586,216,0.586,217,0.436,218,0.586,219,0.586,220,0.586,221,0.586,222,0.586,223,0.586,224,1.034,225,0.586,226,0.586,227,0.586,228,1.387,229,0.436,230,0.586,231,2.107,232,2.107,233,0.586,234,0.586,235,1.387,236,1.387,237,0.586,238,1.034,239,1.034,240,1.034,241,1.034,242,0.586,243,1.034,244,0.586,245,1.909,246,1.909,247,0.586,248,0.586,249,0.586,250,0.586,251,0.586,252,0.586,253,0.586,254,0.586,255,0.586,256,0.586,257,0.024]],["title/changelog.html",[55,0.663,258,0.855,259,1.417]],["body/changelog.html",[4,1.069,6,1.759,20,0.08,21,1.061,24,1.303,28,1.36,30,1.061,31,0.811,37,1.36,54,1.621,90,1.766,116,1.759,180,0.823,192,2.687,209,0.072,257,0.072,259,2.538,260,2.365,261,3.413,262,2.365,263,2.365,264,2.365,265,2.365,266,2.365,267,2.285,268,2.365,269,2.365,270,2.687,271,3.073,272,2.365,273,3.838,274,2.285,275,1.378,276,2.285,277,1.759,278,1.759,279,2.538,280,3.413,281,3.413,282,1.962,283,2.365,284,2.365,285,2.365,286,2.365,287,2.365,288,2.365,289,2.365,290,2.365,291,2.365,292,1.759,293,2.365,294,2.365,295,2.365,296,2.365,297,2.365,298,3.073,299,3.613,300,3.413,301,2.538,302,2.365,303,2.365,304,2.365,305,2.365,306,2.365,307,2.365,308,2.365,309,3.073,310,2.365,311,2.365,312,2.365,313,2.365,314,2.365,315,3.073,316,2.365,317,1.759,318,1.766,319,2.365,320,1.36,321,2.285,322,2.365,323,2.365,324,2.365,325,2.365,326,2.365,327,2.365,328,2.365,329,1.061,330,2.365,331,2.365,332,2.365,333,2.365,334,2.365,335,2.365]],["title/coverage.html",[329,1.326]],["body/coverage.html",[0,1.088,1,1.797,4,1.088,5,2.098,8,1.797,19,1.403,20,0.093,31,0.826,74,1.797,180,1.088,209,0.085,257,0.085,329,1.403,336,3.127,337,2.326,338,3.65,339,3.127,340,3.127,341,2.326,342,2.326]],["title/dependencies.html",[282,1.527,343,1.906]],["body/dependencies.html",[3,1.837,20,0.095,21,1.434,32,1.434,34,1.837,54,1.434,209,0.086,257,0.086,282,1.837,292,2.377,344,3.196,345,3.196,346,3.196]],["title/index.html",[11,0.855,55,0.663,258,0.855]],["body/index.html",[3,0.917,8,2.109,11,1.049,13,2.524,14,1.739,16,1.753,18,2.524,19,1.368,20,0.1,21,1.733,22,1.186,23,1.344,24,1.13,25,1.592,27,2.059,28,2.144,30,1.242,31,0.731,32,1.783,33,2.729,34,0.917,37,1.344,41,2.608,43,2.059,51,1.739,54,1.647,58,1.344,64,2.268,65,2.059,66,1.739,72,0.917,73,1.739,75,2.059,79,1.739,86,2.938,87,1.739,88,1.186,89,1.186,90,1.344,91,1.739,92,1.739,93,1.186,94,0.917,95,1.186,96,1.186,97,1.186,98,1.186,100,1.739,101,2.059,106,1.739,107,1.186,114,1.186,115,1.186,118,1.186,171,1.186,180,1.22,209,0.055,229,1.186,257,0.055,258,0.715,267,1.186,274,1.739,275,1.049,276,1.186,277,1.186,278,1.186,279,1.186,301,2.059,317,1.739,320,0.917,321,1.186,347,1.595,348,1.595,349,0.917,350,1.595,351,1.595,352,1.595,353,2.769,354,2.339,355,1.595,356,1.595,357,1.595,358,1.595,359,2.339,360,1.595,361,2.769,362,1.595,363,1.595,364,1.595,365,2.769,366,1.595,367,1.595,368,1.595,369,1.595,370,2.339,371,3.67,372,3.507,373,3.507,374,1.595,375,3.05,376,1.595,377,2.339,378,1.595,379,1.595,380,1.595,381,1.595,382,1.595,383,1.595,384,1.595,385,1.595,386,1.595,387,1.595,388,1.595,389,1.595,390,1.595,391,1.595,392,1.595,393,1.595,394,1.595]],["title/license.html",[55,0.663,258,0.855,318,1.095]],["body/license.html",[4,0.916,20,0.077,24,1.144,31,0.695,72,1.513,209,0.077,217,1.958,257,0.077,270,1.958,318,1.513,320,1.513,395,3.588,396,3.29,397,2.633,398,2.633,399,2.633,400,2.633,401,3.29,402,2.633,403,3.759,404,4.082,405,2.633,406,3.29,407,3.588,408,2.633,409,3.588,410,3.29,411,2.633,412,2.633,413,2.633,414,2.633,415,2.633,416,2.633,417,2.633,418,2.633,419,2.633,420,2.633,421,2.633,422,2.633,423,2.633,424,3.29,425,3.29,426,2.633,427,2.633,428,2.633,429,3.29,430,2.633,431,2.633,432,2.633,433,2.633,434,2.633,435,2.633,436,2.633,437,2.633,438,2.633,439,2.633,440,2.633,441,2.633,442,2.633,443,2.633,444,2.633,445,2.633,446,2.633,447,2.633,448,2.633,449,2.633,450,2.633,451,2.633,452,2.633]],["title/modules.html",[349,1.698]],["body/modules.html",[20,0.088,209,0.088,257,0.088,349,1.899]],["title/overview.html",[453,2.197]],["body/overview.html",[0,1.137,20,0.087,74,1.878,94,2.152,209,0.087,257,0.087,453,2.43]],["title/miscellaneous/typealiases.html",[454,1.417,455,2.657]],["body/miscellaneous/typealiases.html",[0,1.246,5,1.741,11,1.607,16,2.193,19,1.607,20,0.084,23,2.193,24,1.054,25,1.741,30,1.359,31,0.8,32,1.607,55,1.054,56,2.253,57,2.253,58,1.741,59,2.253,60,2.253,61,2.253,62,2.253,187,2.059,209,0.084,257,0.084,454,2.253,456,3.03,457,3.583]],["title/unit-test.html",[179,1.387,275,1.082]],["body/unit-test.html",[4,1.118,20,0.087,179,1.847,180,1.118,187,1.847,209,0.087,257,0.087,275,1.442,329,1.442,337,2.39,341,2.39,342,2.39,458,3.214,459,3.214]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["0",{"_index":91,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["0.5.9",{"_index":346,"title":{},"body":{"dependencies.html":{}}}],["02",{"_index":312,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":272,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":94,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"overview.html":{}}}],["1.0.0",{"_index":311,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":345,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":90,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"index.html":{}}}],["100",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":178,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["11",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["15.2.0",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":269,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":270,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["23/23",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["6.0",{"_index":358,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":332,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["_index",{"_index":241,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["_type",{"_index":243,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["abov",{"_index":423,"title":{},"body":{"license.html":{}}}],["action",{"_index":446,"title":{},"body":{"license.html":{}}}],["ad",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["adapt",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":361,"title":{},"body":{"index.html":{}}}],["adher",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":456,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":416,"title":{},"body":{"license.html":{}}}],["apivers",{"_index":357,"title":{},"body":{"index.html":{}}}],["argument",{"_index":246,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["aris",{"_index":450,"title":{},"body":{"license.html":{}}}],["array",{"_index":208,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["associ",{"_index":405,"title":{},"body":{"license.html":{}}}],["author",{"_index":439,"title":{},"body":{"license.html":{}}}],["base",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["basenam",{"_index":84,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["basic",{"_index":321,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bodi",{"_index":213,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["branch",{"_index":458,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":30,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["builder",{"_index":369,"title":{},"body":{"index.html":{}}}],["buildrun",{"_index":389,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":205,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["c",{"_index":217,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"license.html":{}}}],["call",{"_index":245,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["catch((reason",{"_index":226,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["certain",{"_index":56,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["chai",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":192,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{}}}],["changelog",{"_index":259,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charg",{"_index":400,"title":{},"body":{"license.html":{}}}],["claim",{"_index":442,"title":{},"body":{"license.html":{}}}],["class",{"_index":74,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"overview.html":{}}}],["client",{"_index":22,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["client(clientopt",{"_index":197,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["clientopt",{"_index":13,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["clock",{"_index":36,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["cluster",{"_index":204,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["code",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["combin",{"_index":103,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["commit",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":193,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["commontag",{"_index":366,"title":{},"body":{"index.html":{}}}],["compil",{"_index":274,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compodoc",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["compos",{"_index":372,"title":{},"body":{"index.html":{}}}],["comput",{"_index":364,"title":{},"body":{"index.html":{}}}],["condit",{"_index":422,"title":{},"body":{"license.html":{}}}],["config",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["configopt",{"_index":18,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["configur",{"_index":230,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["connect",{"_index":452,"title":{},"body":{"license.html":{}}}],["consol",{"_index":176,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["const",{"_index":86,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["constructor",{"_index":172,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["contract",{"_index":447,"title":{},"body":{"license.html":{}}}],["copi",{"_index":403,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":395,"title":{},"body":{"license.html":{}}}],["count",{"_index":118,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["counter",{"_index":37,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"index.html":{}}}],["counter.getcount",{"_index":119,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["coverag",{"_index":329,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":171,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["ctx",{"_index":212,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["ctx.date",{"_index":236,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["ctx.registri",{"_index":234,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["ctx.type",{"_index":235,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["current",{"_index":186,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["dailyindex(basenam",{"_index":85,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["damag",{"_index":443,"title":{},"body":{"license.html":{}}}],["data",{"_index":375,"title":{},"body":{"index.html":{}}}],["date",{"_index":65,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["date.getd",{"_index":88,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["date.getfullyear",{"_index":96,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["date.getmonth",{"_index":93,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["day",{"_index":87,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["dayprefix",{"_index":89,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["dayprefix}${day",{"_index":98,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["dd",{"_index":82,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["deal",{"_index":406,"title":{},"body":{"license.html":{}}}],["defaultdocumentbuild",{"_index":105,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["defaulttypedetermin",{"_index":78,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["depend",{"_index":282,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{}}}],["determin",{"_index":185,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["dev",{"_index":370,"title":{},"body":{"index.html":{}}}],["differ",{"_index":277,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["discov",{"_index":386,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":414,"title":{},"body":{"license.html":{}}}],["docker",{"_index":371,"title":{},"body":{"index.html":{}}}],["document",{"_index":31,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["e.g",{"_index":61,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["editorconfig",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["elasticsearch",{"_index":21,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["elasticsearchmetricreport",{"_index":8,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"index.html":{}}}],["elasticsearchmetricreporter.buildtags(commontag",{"_index":367,"title":{},"body":{"index.html":{}}}],["elasticsearchmetricreporter.dailyindex(\"metr",{"_index":174,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.defaultdocumentbuild",{"_index":173,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.defaulttypedetermin",{"_index":175,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getcountervalues(metr",{"_index":109,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getgaugevalue(metr",{"_index":113,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.gethistogramvalues(metr",{"_index":110,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getmetervalues(metr",{"_index":111,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.getmonotonecountervalues(metr",{"_index":108,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporter.gettimervalues(metr",{"_index":112,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["elasticsearchmetricreporteropt",{"_index":1,"title":{"interfaces/ElasticsearchMetricReporterOption.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{}}}],["emtric",{"_index":59,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["error",{"_index":29,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["error(`error",{"_index":227,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["es2017",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["etc",{"_index":62,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["event",{"_index":438,"title":{},"body":{"license.html":{}}}],["export",{"_index":63,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["express",{"_index":431,"title":{},"body":{"license.html":{}}}],["extend",{"_index":9,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["extens",{"_index":71,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":434,"title":{},"body":{"license.html":{}}}],["fix",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":421,"title":{},"body":{"license.html":{}}}],["format",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":399,"title":{},"body":{"license.html":{}}}],["function",{"_index":187,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["furnish",{"_index":419,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":38,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["gauge.getvalu",{"_index":123,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["gener",{"_index":229,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["get",{"_index":55,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["getcountervalues(count",{"_index":121,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getgaugevalue(gaug",{"_index":122,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["gethistogramvalues(histogram",{"_index":125,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getlog",{"_index":198,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getmetervalues(met",{"_index":150,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getmonotonecountervalues(count",{"_index":117,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["getnumber(valu",{"_index":169,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["gettimervalues(tim",{"_index":160,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["grafana",{"_index":376,"title":{},"body":{"index.html":{}}}],["grant",{"_index":398,"title":{},"body":{"license.html":{}}}],["graph",{"_index":381,"title":{},"body":{"index.html":{}}}],["group",{"_index":100,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["handleresult",{"_index":211,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["herebi",{"_index":397,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":39,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["histogram.getcount",{"_index":126,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["histogram.getsnapshot",{"_index":128,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["holder",{"_index":440,"title":{},"body":{"license.html":{}}}],["homepag",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":359,"title":{},"body":{"index.html":{}}}],["http://elasticsearch:9200",{"_index":380,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":378,"title":{},"body":{"index.html":{}}}],["http://localhost:5601",{"_index":384,"title":{},"body":{"index.html":{}}}],["identifi",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["imag",{"_index":388,"title":{},"body":{"index.html":{}}}],["implement",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["impli",{"_index":432,"title":{},"body":{"license.html":{}}}],["import",{"_index":33,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["includ",{"_index":409,"title":{},"body":{"license.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["indexnam",{"_index":79,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["indexnamedetermin",{"_index":14,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["inform",{"_index":57,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["initi",{"_index":313,"title":{},"body":{"changelog.html":{}}}],["inspector",{"_index":54,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":353,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":27,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["instanceof",{"_index":107,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/ElasticsearchMetricReporterOption.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["interv",{"_index":183,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["isnan(count",{"_index":120,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["isnan(valu",{"_index":124,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["it'",{"_index":191,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["jenkin",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["jenkinsfil",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["js",{"_index":352,"title":{},"body":{"index.html":{}}}],["jsdoc",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["kibana",{"_index":383,"title":{},"body":{"index.html":{}}}],["kind",{"_index":430,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":444,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":441,"title":{},"body":{"license.html":{}}}],["lib/.../elasticsearchmetricreporter.t",{"_index":457,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/metrics/elasticsearchmetricreporter.t",{"_index":5,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["librari",{"_index":347,"title":{},"body":{"index.html":{}}}],["licens",{"_index":318,"title":{"license.html":{}},"body":{"changelog.html":{},"license.html":{}}}],["limit",{"_index":410,"title":{},"body":{"license.html":{}}}],["line",{"_index":459,"title":{},"body":{"unit-test.html":{}}}],["line:vari",{"_index":240,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["link",{"_index":67,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["lint",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":387,"title":{},"body":{"index.html":{}}}],["localhost:9200",{"_index":360,"title":{},"body":{"index.html":{}}}],["log",{"_index":15,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["logger",{"_index":26,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["logmetadata",{"_index":170,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["made",{"_index":348,"title":{},"body":{"index.html":{}}}],["map",{"_index":34,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"dependencies.html":{},"index.html":{}}}],["map((result",{"_index":214,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["match",{"_index":257,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["meant",{"_index":350,"title":{},"body":{"index.html":{}}}],["memberof",{"_index":68,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["merchant",{"_index":433,"title":{},"body":{"license.html":{}}}],["merg",{"_index":413,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":60,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"miscellaneous/typealiases.html":{}}}],["meter",{"_index":40,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["meter.getcount",{"_index":151,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["method",{"_index":206,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["metric",{"_index":32,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metric.getcount",{"_index":368,"title":{},"body":{"index.html":{}}}],["metric.getgroup",{"_index":115,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["metric.getnam",{"_index":114,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["metricdocumentbuild",{"_index":16,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metricinfodetermin",{"_index":23,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metriclogg",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["metricregistri",{"_index":41,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["metricreport",{"_index":70,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["metrics@1.11.0",{"_index":302,"title":{},"body":{"changelog.html":{}}}],["metrics@1.13.0",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.3",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.7",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":42,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["metrictyp",{"_index":43,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["millisecond",{"_index":44,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["minreportingtimeout",{"_index":182,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["miscellan",{"_index":454,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":320,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mm",{"_index":81,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["mocha",{"_index":322,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":412,"title":{},"body":{"license.html":{}}}],["modul",{"_index":349,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monoton",{"_index":116,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{}}}],["monotonecount",{"_index":45,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["month",{"_index":92,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["monthprefix",{"_index":95,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["monthprefix}${month",{"_index":97,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["navig",{"_index":377,"title":{},"body":{"index.html":{}}}],["need",{"_index":365,"title":{},"body":{"index.html":{}}}],["new",{"_index":180,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["next",{"_index":239,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["node",{"_index":278,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["node10licens",{"_index":394,"title":{},"body":{"index.html":{}}}],["node6",{"_index":390,"title":{},"body":{"index.html":{}}}],["node7",{"_index":391,"title":{},"body":{"index.html":{}}}],["node8",{"_index":392,"title":{},"body":{"index.html":{}}}],["node9",{"_index":393,"title":{},"body":{"index.html":{}}}],["nodej",{"_index":279,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodejs.it",{"_index":351,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":437,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":424,"title":{},"body":{"license.html":{}}}],["npm",{"_index":354,"title":{},"body":{"index.html":{}}}],["null",{"_index":106,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["number",{"_index":168,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["nyc",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["object",{"_index":99,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["obtain",{"_index":402,"title":{},"body":{"license.html":{}}}],["option",{"_index":7,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["otherwis",{"_index":449,"title":{},"body":{"license.html":{}}}],["out",{"_index":451,"title":{},"body":{"license.html":{}}}],["overallreportcontext",{"_index":46,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["overview",{"_index":453,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.concat(c",{"_index":218,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["packag",{"_index":343,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":294,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":83,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["paramet",{"_index":102,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["particular",{"_index":435,"title":{},"body":{"license.html":{}}}],["pattern",{"_index":385,"title":{},"body":{"index.html":{}}}],["permiss",{"_index":396,"title":{},"body":{"license.html":{}}}],["permit",{"_index":418,"title":{},"body":{"license.html":{}}}],["person",{"_index":401,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":301,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground.shview",{"_index":374,"title":{},"body":{"index.html":{}}}],["portion",{"_index":427,"title":{},"body":{"license.html":{}}}],["privat",{"_index":167,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["project",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["promis",{"_index":210,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["properti",{"_index":12,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["protect",{"_index":207,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["provid",{"_index":428,"title":{},"body":{"license.html":{}}}],["public",{"_index":77,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["publish",{"_index":72,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"license.html":{}}}],["purpos",{"_index":436,"title":{},"body":{"license.html":{}}}],["readm",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":69,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reason",{"_index":228,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reduce((p",{"_index":216,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["refactor",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["registri",{"_index":64,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["remov",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["report",{"_index":28,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":247,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reporter.addmetricregistry(registri",{"_index":362,"title":{},"body":{"index.html":{}}}],["reporter.start();determin",{"_index":363,"title":{},"body":{"index.html":{}}}],["reportgauge(gaug",{"_index":249,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reporthistogram(histogram",{"_index":251,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reportingcontext",{"_index":231,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reportingresult",{"_index":47,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reportinterv",{"_index":177,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reportmeter(met",{"_index":253,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reportmetr",{"_index":232,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["reporttimer(tim",{"_index":255,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["response.error",{"_index":225,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["response.took}m",{"_index":223,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["restrict",{"_index":408,"title":{},"body":{"license.html":{}}}],["result",{"_index":209,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["result.result",{"_index":215,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["return",{"_index":75,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["right",{"_index":411,"title":{},"body":{"license.html":{}}}],["run",{"_index":373,"title":{},"body":{"index.html":{}}}],["save",{"_index":355,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":49,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["scheduledmetricreport",{"_index":48,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["scheduledmetricreporteropt",{"_index":10,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["script",{"_index":276,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sell",{"_index":417,"title":{},"body":{"license.html":{}}}],["semant",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":203,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["set",{"_index":200,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["setinterv",{"_index":181,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["setlog(log",{"_index":201,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["setup",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":425,"title":{},"body":{"license.html":{}}}],["sinon",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":127,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["softwar",{"_index":404,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"dependencies.html":{},"index.html":{}}}],["specif",{"_index":104,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["specifi",{"_index":58,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":258,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["statement",{"_index":337,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":76,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["stdclock",{"_index":50,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["string",{"_index":66,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["subject",{"_index":420,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":415,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":426,"title":{},"body":{"license.html":{}}}],["super",{"_index":194,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["support",{"_index":292,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/regist",{"_index":35,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["tabl",{"_index":342,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":341,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":51,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["target",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["test",{"_index":275,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["then((respons",{"_index":220,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.buildtags(ctx.registri",{"_index":237,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.client",{"_index":196,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.client.bulk",{"_index":219,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":153,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":155,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":157,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":159,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":139,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":141,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":143,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":147,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":145,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":131,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":133,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":137,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":135,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":149,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":163,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":164,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":165,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":166,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.logmetadata",{"_index":195,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.indexnamedeterminator(ctx.registri",{"_index":242,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.log",{"_index":199,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.log.debug",{"_index":221,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.metricdocumentbuild",{"_index":233,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.options.typedeterminator(ctx.registri",{"_index":244,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(count",{"_index":248,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(gaug",{"_index":250,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(histogram",{"_index":252,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(met",{"_index":254,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["this.reportmetric(tim",{"_index":256,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["time",{"_index":184,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["timeout",{"_index":189,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["timer",{"_index":52,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["timer.getcount",{"_index":161,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["timer.getsnapshot",{"_index":162,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["timestamp",{"_index":101,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["timeunit",{"_index":53,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["took",{"_index":222,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["tool",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["tort",{"_index":448,"title":{},"body":{"license.html":{}}}],["travis.yml",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["trigger",{"_index":188,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["tslint:dis",{"_index":238,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":455,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedetermin",{"_index":17,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["typescript",{"_index":317,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["under",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":179,"title":{"unit-test.html":{}},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"unit-test.html":{}}}],["unreleas",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":379,"title":{},"body":{"index.html":{}}}],["us",{"_index":24,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"changelog.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["usag",{"_index":356,"title":{},"body":{"index.html":{}}}],["valu",{"_index":73,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{},"index.html":{}}}],["values[`count",{"_index":129,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`m15_r",{"_index":152,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`m1_r",{"_index":154,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`m5_r",{"_index":156,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`max",{"_index":130,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`mean",{"_index":132,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`mean_r",{"_index":158,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`min",{"_index":134,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`p50",{"_index":136,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`p75",{"_index":138,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`p95",{"_index":140,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`p98",{"_index":142,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`p99",{"_index":144,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`p999",{"_index":146,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["values[`stddev",{"_index":148,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["version",{"_index":267,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["view",{"_index":382,"title":{},"body":{"index.html":{}}}],["void",{"_index":202,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["warranti",{"_index":429,"title":{},"body":{"license.html":{}}}],["wether",{"_index":190,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["whether",{"_index":445,"title":{},"body":{"license.html":{}}}],["without",{"_index":407,"title":{},"body":{"license.html":{}}}],["write",{"_index":224,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}],["yyyi",{"_index":80,"title":{},"body":{"interfaces/ElasticsearchMetricReporterOption.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ElasticsearchMetricReporterOption.html":{"url":"interfaces/ElasticsearchMetricReporterOption.html","title":"interface - ElasticsearchMetricReporterOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ElasticsearchMetricReporterOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/ElasticsearchMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Options for ElasticsearchMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientOptions\n                                \n                                \n                                        indexnameDeterminator\n                                \n                                \n                                        log\n                                \n                                \n                                        metricDocumentBuilder\n                                \n                                \n                                        typeDeterminator\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientOptions\n                                    \n                                \n                                \n                                    \n                                        clientOptions:     ConfigOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ConfigOptions\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Elasticsearch client options.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        indexnameDeterminator\n                                    \n                                \n                                \n                                    \n                                        indexnameDeterminator:     MetricInfoDeterminator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MetricInfoDeterminator\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Used to get the name of the index.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Logger instance used to report errors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metricDocumentBuilder\n                                    \n                                \n                                \n                                    \n                                        metricDocumentBuilder:     MetricDocumentBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MetricDocumentBuilder\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Used to build the document for a metric.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        typeDeterminator\n                                    \n                                \n                                \n                                    \n                                        typeDeterminator:     MetricInfoDeterminator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MetricInfoDeterminator\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Used to get the type of the metric instance.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Client, ConfigOptions } from \"elasticsearch\";\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Interface for getting a certain information using the specified emtric metadata -\n * e.g. name of the index, metric type, etc.\n */\nexport type MetricInfoDeterminator = (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => string;\n\n/**\n * Interface for building a document for a metric.\n */\nexport type MetricDocumentBuilder = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    date: Date,\n    tags: Tags) => {};\n\n/**\n * Options for {@link ElasticsearchMetricReporter}.\n *\n * @export\n * @interface ElasticsearchMetricReporterOption\n * @extends {ScheduledMetricReporterOptions}\n */\nexport interface ElasticsearchMetricReporterOption extends ScheduledMetricReporterOptions {\n    /**\n     * Elasticsearch client options.\n     *\n     * @type {ConfigOptions}\n     * @memberof ElasticsearchMetricReporterOption\n     */\n    readonly clientOptions: ConfigOptions;\n    /**\n     * Logger instance used to report errors.\n     *\n     * @type {Logger}\n     * @memberof ElasticsearchMetricReporterOption\n     */\n    log: Logger;\n    /**\n     * Used to get the name of the index.\n     *\n     * @type {MetricInfoDeterminator}\n     * @memberof ElasticsearchMetricReporterOption\n     */\n    readonly indexnameDeterminator: MetricInfoDeterminator;\n    /**\n     * Used to get the type of the metric instance.\n     *\n     * @type {MetricInfoDeterminator}\n     * @memberof ElasticsearchMetricReporterOption\n     */\n    readonly typeDeterminator: MetricInfoDeterminator;\n    /**\n     * Used to build the document for a metric.\n     *\n     * @type {MetricDocumentBuilder}\n     * @memberof ElasticsearchMetricReporterOption\n     */\n    readonly metricDocumentBuilder: MetricDocumentBuilder;\n}\n\n/**\n * A MetricReporter extension used to publish metric values to elasticsearch.\n *\n * @export\n * @class ElasticsearchMetricReporter\n * @extends {MetricReporter}\n */\nexport class ElasticsearchMetricReporter extends ScheduledMetricReporter> {\n\n    /**\n     * Returns a {@link MetricInfoDeterminator} that returns 'metric' as type.\n     *\n     * @static\n     * @returns {MetricInfoDeterminator}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static defaultTypeDeterminator(): MetricInfoDeterminator {\n        return (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => \"metric\";\n    }\n\n    /**\n     * Returns a {@link MetricInfoDeterminator} that returns an indexname like '-yyyy-mm-dd'.\n     *\n     * @static\n     * @param {string} baseName The\n     * @returns {MetricInfoDeterminator}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static dailyIndex(baseName: string): MetricInfoDeterminator {\n        return (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => {\n            const day = date.getDate();\n            const dayPrefix: string = (day >= 10) ? \"\" : \"0\";\n            const month = date.getMonth() + 1;\n            const monthPrefix: string = (month >= 10) ? \"\" : \"0\";\n            return `${baseName}-${date.getFullYear()}-${monthPrefix}${month}-${dayPrefix}${day}`;\n        };\n    }\n\n    /**\n     * Returns a {@link MetricDocumentBuilder} that builds an object for a metric like this:\n     *\n     * {\n     *\n     *  name: ..., // name of metric\n     *\n     *  group: ..., // group of metric\n     *\n     *  timestamp: ..., // timestamp from parameter\n     *\n     *  tags: ..., // combined tags from this reporter and the metric\n     *\n     *  values..., // metric specific values\n     *\n     *  type..., // metric type\n     *\n     * }\n     *\n     * @static\n     * @returns {MetricDocumentBuilder}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static defaultDocumentBuilder(): MetricDocumentBuilder {\n        return (\n            registry: MetricRegistry,\n            metric: Metric,\n            type: MetricType,\n            timestamp: Date,\n            tags: Tags) => {\n\n            let values = null;\n\n            if (metric instanceof MonotoneCounter) {\n                values = ElasticsearchMetricReporter.getMonotoneCounterValues(metric);\n            } else if (metric instanceof Counter) {\n                values = ElasticsearchMetricReporter.getCounterValues(metric);\n            } else if (metric instanceof Histogram) {\n                values = ElasticsearchMetricReporter.getHistogramValues(metric);\n            } else if (metric instanceof Meter) {\n                values = ElasticsearchMetricReporter.getMeterValues(metric);\n            } else if (metric instanceof Timer) {\n                values = ElasticsearchMetricReporter.getTimerValues(metric);\n            } else {\n                values = ElasticsearchMetricReporter.getGaugeValue(metric as Gauge);\n            }\n\n            if (values === null) {\n                return null;\n            }\n\n            const name = metric.getName();\n            const group = metric.getGroup();\n            return { name, group, tags, timestamp, values, type };\n        };\n    }\n\n    /**\n     * Gets the values for the specified monotone counter metric.\n     *\n     * @static\n     * @param {MonotoneCounter} counter\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getMonotoneCounterValues(counter: MonotoneCounter): {} {\n        const count = counter.getCount();\n        if (!count || isNaN(count)) {\n            return null;\n        }\n        return { count };\n    }\n\n    /**\n     * Gets the values for the specified counter metric.\n     *\n     * @static\n     * @param {Counter} counter\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getCounterValues(counter: Counter): {} {\n        const count = counter.getCount();\n        if (!count || isNaN(count)) {\n            return null;\n        }\n        return { count };\n    }\n\n    /**\n     * Gets the values for the specified {Gauge} metric.\n     *\n     * @static\n     * @param {Gauge} gauge\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getGaugeValue(gauge: Gauge): {} {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        return { value };\n    }\n\n    /**\n     * Gets the values for the specified {Histogram} metric.\n     *\n     * @static\n     * @param {Histogram} histogram\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getHistogramValues(histogram: Histogram): {} {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const values: any = {};\n\n        values[`count`] = value;\n        values[`max`] = this.getNumber(snapshot.getMax());\n        values[`mean`] = this.getNumber(snapshot.getMean());\n        values[`min`] = this.getNumber(snapshot.getMin());\n        values[`p50`] = this.getNumber(snapshot.getMedian());\n        values[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        values[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        values[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        values[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        values[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        values[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return values;\n    }\n\n    /**\n     * Gets the values for the specified {Meter} metric.\n     *\n     * @static\n     * @param {Meter} meter\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getMeterValues(meter: Meter): {} {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const values: any = {};\n\n        values[`count`] = value;\n        values[`m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        values[`m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        values[`m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        values[`mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return values;\n    }\n\n    /**\n     * Gets the values for the specified {Timer} metric.\n     *\n     * @static\n     * @param {Timer} timer\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getTimerValues(timer: Timer): {} {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const values: any = {};\n\n        values[`count`] = value;\n        values[`m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        values[`m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        values[`m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        values[`max`] = this.getNumber(snapshot.getMax());\n        values[`mean`] = this.getNumber(snapshot.getMean());\n        values[`mean_rate`] = this.getNumber(timer.getMeanRate());\n        values[`min`] = this.getNumber(snapshot.getMin());\n        values[`p50`] = this.getNumber(snapshot.getMedian());\n        values[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        values[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        values[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        values[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        values[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        values[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return values;\n    }\n\n    /**\n     * Either gets 0 or the specifed value.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private static getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Elasticsearch client used to do reporting.\n     *\n     * @private\n     * @type {Client}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private client: Client;\n\n    /**\n     * Creates an instance of ElasticsearchMetricReporter.\n     */\n    public constructor(\n        {\n            clientOptions,\n            metricDocumentBuilder = ElasticsearchMetricReporter.defaultDocumentBuilder(),\n            indexnameDeterminator = ElasticsearchMetricReporter.dailyIndex(\"metric\"),\n            typeDeterminator = ElasticsearchMetricReporter.defaultTypeDeterminator(),\n            log = console,\n            reportInterval = 1000,\n            unit = MILLISECOND,\n            clock = new StdClock(),\n            scheduler = setInterval,\n            minReportingTimeout = 1,\n            tags = new Map(),\n        }: {\n            /**\n             * Elasticsearch client options.\n             * @type {ConfigOptions}\n             */\n            clientOptions: ConfigOptions,\n            /**\n             * Used to build the document for a metric.\n             * @type {MetricDocumentBuilder}\n             */\n            metricDocumentBuilder?: MetricDocumentBuilder,\n            /**\n             * Used to get the name of the index.\n             * @type {MetricInfoDeterminator}\n             */\n            indexnameDeterminator?: MetricInfoDeterminator,\n            /**\n             * Used to get the type of the metric instance.\n             * @type {MetricInfoDeterminator}\n             */\n            typeDeterminator?: MetricInfoDeterminator,\n            /**\n             * The logger instance used to report metrics.\n             * @type {Logger}\n             */\n            log?: Logger,\n            /**\n             * Reporting interval in the time-unit of {@link #unit}.\n             * @type {number}\n             */\n            reportInterval?: number;\n            /**\n             * The time-unit of the reporting interval.\n             * @type {TimeUnit}\n             */\n            unit?: TimeUnit;\n            /**\n             * The clock instance used determine the current time.\n             * @type {Clock}\n             */\n            clock?: Clock;\n            /**\n             * The scheduler function used to trigger reporting.\n             * @type {Scheduler}\n             */\n            scheduler?: Scheduler;\n            /**\n             * The timeout in which a metrics gets reported wether it's value has changed or not.\n             * @type {number}\n             */\n            minReportingTimeout?: number;\n            /**\n             * Common tags for this reporter instance.\n             * @type {Map}\n             */\n            tags?: Map;\n        }) {\n        super({\n            clientOptions,\n            clock,\n            indexnameDeterminator,\n            log,\n            metricDocumentBuilder,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            typeDeterminator,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n\n        this.client = new Client(clientOptions);\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof ElasticsearchMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Send the combinations of index and document to the elasticsearch cluster\n     * using the bulk method of the elasticsearch client.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {Array>} results\n     * @returns {Promise}\n     * @memberof ElasticsearchMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const body = results\n            .map((result) => result.result)\n            .reduce((p, c) => p.concat(c));\n        return this.client.bulk({ body })\n            .then((response) => {\n                if (this.options.log) {\n                    this.options.log.debug(\n                        `took ${response.took}ms to write ${type} metrics - errors ${response.errors}`,\n                        this.logMetadata,\n                    );\n                }\n            })\n            .catch((reason) => {\n                if (this.options.log) {\n                    this.options.log\n                        .error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                }\n            });\n    }\n\n    /**\n     * Generalized reporting method of all types of metric instances.\n     * Builds the index configuration document and the metric document.\n     *\n     * @protected\n     * @param {Metric} metric\n     * @param {ReportingContext} ctx\n     * @returns {Array}\n     * @memberof ElasticsearchMetricReporter\n     */\n    protected reportMetric(\n        metric: Metric, ctx: MetricSetReportContext): Array {\n        const document = this.options.metricDocumentBuilder(\n            ctx.registry, metric, ctx.type, ctx.date, this.buildTags(ctx.registry, metric));\n        if (!!document) {\n            // tslint:disable-next-line:variable-name\n            const _index = this.options.indexnameDeterminator(ctx.registry, metric, ctx.type, ctx.date);\n            // tslint:disable-next-line:variable-name\n            const _type = this.options.typeDeterminator(ctx.registry, metric, ctx.type, ctx.date);\n            return [\n                { index: { _index, _type } },\n                document,\n            ];\n        }\n        return [];\n    }\n\n    /**\n     * Calls {@link #reportMetric} with the specified arguments.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(ReportingContext)} ctx\n     * @returns {Array}\n     * @memberof ElasticsearchMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): Array {\n        return this.reportMetric(counter, ctx);\n    }\n\n    /**\n     * Calls {@link #reportMetric} with the specified arguments.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {ReportingContext>} ctx\n     * @returns {Array}\n     * @memberof ElasticsearchMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): Array {\n        return this.reportMetric(gauge, ctx);\n    }\n\n    /**\n     * Calls {@link #reportMetric} with the specified arguments.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {ReportingContext} ctx\n     * @returns {Array}\n     * @memberof ElasticsearchMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): Array {\n        return this.reportMetric(histogram, ctx);\n    }\n\n    /**\n     * Calls {@link #reportMetric} with the specified arguments.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {ReportingContext} ctx\n     * @returns {Array}\n     * @memberof ElasticsearchMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): Array {\n        return this.reportMetric(meter, ctx);\n    }\n\n    /**\n     * Calls {@link #reportMetric} with the specified arguments.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {ReportingContext} ctx\n     * @returns {Array}\n     * @memberof ElasticsearchMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): Array {\n        return this.reportMetric(timer, ctx);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.0.0] - 2018-11-04\nAdded\n\nCHANGELOG\ncompile and test script for different node versions\n\nChanged\n\nadded nodejs 11 to travis.yml\nupdated dependencies\nuse inspector-metrics@1.13.0\nadapted new MetricLogger implementation\ncompile target from \"es2017\" to \"es6\"\n\n[1.1.0] - 2018-10-05\nAdded\n\nsupport for monotone counters\n\"description\" & \"homepage\" to package.json\njsdocs for components\n\nChanged\n\nfixed linting config\nrefactored playground\nupdated dependencies\nuse inspector-metrics@1.11.0\nrefactored build scripts\nuse compodoc as documentation tool\n\nRemoved\n\nJenkinsfile\n\n[1.0.1] - 2018-07-08\nChanged\n\nupdated dependencies\nuse inspector-metrics@1.8.7\nadded nodejs 10 to travis.yml\nrefactored playground\n\n[1.0.0] - 2018-02-08\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic elasticsearch reporter\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\nadded editorconfig file\ntravis.yml for nodejs 6, 7, 8, 9\nbasic playground setup\nuse inspector-metrics@1.8.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/ElasticsearchMetricReporter.ts\n            \n            \n                class\n            \n            \n                ElasticsearchMetricReporter\n            \n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                lib/metrics/ElasticsearchMetricReporter.ts\n            \n            \n                interface\n            \n            \n                ElasticsearchMetricReporterOption\n            \n            \n                100 %\n                (6/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            elasticsearch : 15.2.0\n        \n            inspector-metrics : 1.13.0\n        \n            source-map-support : 0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-elasticsearch\nTypescript Metrics Reporter for\nelasticsearch.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with typescript / nodejs.It uses elasticsearch-js as elasticsearch client.\ninstall\nnpm install --save inspector-elasticsearch\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { ElasticsearchMetricReporter } from \"inspector-elasticsearch\";\nimport { ConfigOptions } from \"elasticsearch\";\n\nconst clientOptions: ConfigOptions = {\n    apiVersion: \"6.0\",\n    host: \"localhost:9200\",\n};\n// instance the elasticsearch reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();determine the indexname for a metric\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    ElasticsearchMetricReporter,\n    MetricInfoDeterminator\n} from \"inspector-elasticsearch\";\nimport { ConfigOptions } from \"elasticsearch\";\n\nconst clientOptions: ConfigOptions = { ... };\n// computes the name of the index using the timestamp of the metric\nconst indexnameDeterminator: MetricInfoDeterminator = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    date: Date) => {\n\n    const day = date.getDate();\n    const dayPrefix: string = (day >= 10) ? \"\" : \"0\";\n    const month = date.getMonth() + 1;\n    const monthPrefix: string = (month >= 10) ? \"\" : \"0\";\n    return `metrics-${date.getFullYear()}-${monthPrefix}${month}-${dayPrefix}${day}`;\n};\n// the indexname generator needs to be specified when instancing the reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    indexnameDeterminator, \n}\n);build a metric document\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    ElasticsearchMetricReporter,\n    MetricDocumentBuilder,\n    MetricType\n} from \"inspector-elasticsearch\";\nimport { ConfigOptions } from \"elasticsearch\";\n\nconst clientOptions: ConfigOptions = { ... };\n// only build documents for counter metrics\nconst metricDocumentBuilder: MetricDocumentBuilder = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    timestamp: Date,\n    commonTags: Map) => {\n\n    if (metric instanceof Counter) {\n        const tags = ElasticsearchMetricReporter.buildTags(commonTags, metric);\n        const name = metric.getName();\n        const group = metric.getGroup();\n        return { name, group, tags, timestamp, values: { 'count': metric.getCount() }, type };\n\n    } else {\n        // null values will not be reported / published\n        return null;\n    }\n};\n\n// the document builder needs to be specified when instancing the reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter({\n    clientOptions,\n    metricDocumentBuilder,\n});dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\nnpm run compile\n# running playground script\n./playground.shview data in grafana\n\nNavigate to http://localhost:3000\nAdd a new Data Source (type: elasticsearch, host / url: http://elasticsearch:9200)\nCreate a new graph\n\n\nview data in kibana\n\nNavigate to http://localhost:5601\nAdd a new index pattern like metric-*\nDiscover data\n\n\nlocal dev\ncompile & test with different nodejs versions\nbuild docker images:  \ndocker-compose buildrun tests:  \ndocker-compose run node6\ndocker-compose run node7\ndocker-compose run node8\ndocker-compose run node9\ndocker-compose run node10License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MetricDocumentBuilder   (lib/.../ElasticsearchMetricReporter.ts)\n                        \n                        \n                            MetricInfoDeterminator   (lib/.../ElasticsearchMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/ElasticsearchMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        MetricDocumentBuilder\n                    \n                \n                    \n                        \n                            Interface for building a document for a metric.\n\n                        \n                    \n                \n                    \n                        MetricDocumentBuilder:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        MetricInfoDeterminator\n                    \n                \n                    \n                        \n                            Interface for getting a certain information using the specified emtric metadata -\ne.g. name of the index, metric type, etc.\n\n                        \n                    \n                \n                    \n                        MetricInfoDeterminator:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
