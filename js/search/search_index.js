var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/interfaces/MetricEntry.html",[0,0.666,1,1.169]],["body/interfaces/MetricEntry.html",[0,0.726,1,1.198,2,0.557,3,0.544,4,0.234,5,0.308,6,0.557,7,0.982,8,0.982,9,2.165,10,2.665,11,1.849,12,1.599,13,1.849,14,0.843,15,0.982,16,1.815,17,2.303,18,3.339,19,1.516,20,0.112,21,2.475,22,1.318,23,0.963,24,1.697,25,0.557,26,1.464,27,0.963,28,0.88,29,2.53,30,1.578,31,1.849,32,1.849,33,2.708,34,1.849,35,1.979,36,1.59,37,1.59,38,0.982,39,1.815,40,1.318,41,1.815,42,1.917,43,1.815,44,0.308,45,3.536,46,0.407,47,1.815,48,1.275,49,1.065,50,0.718,51,0.407,52,1.02,53,1.4,54,0.407,55,0.718,56,0.407,57,1.4,58,0.407,59,1.54,60,1.683,61,2.355,62,1.917,63,0.73,64,0.501,65,1.452,66,2.378,67,0.557,68,0.308,69,0.544,70,1.965,71,0.982,72,2.665,73,1.815,74,3.188,75,3.02,76,0.557,77,0.407,78,0.557,79,0.557,80,0.557,81,3.431,82,0.982,83,0.557,84,2.458,85,0.718,86,0.407,87,0.407,88,0.718,89,1.464,90,0.718,91,0.407,92,0.544,93,0.407,94,0.407,95,0.407,96,0.407,97,1.59,98,1.162,99,0.557,100,1.318,101,0.982,102,0.557,103,0.718,104,1.771,105,1.326,106,0.557,107,0.557,108,0.557,109,0.557,110,0.557,111,0.557,112,0.407,113,0.407,114,0.407,115,0.557,116,0.557,117,0.557,118,1.815,119,0.557,120,0.557,121,0.557,122,0.982,123,0.557,124,0.557,125,0.557,126,1.464,127,1.59,128,0.982,129,0.557,130,0.557,131,0.982,132,1.815,133,0.557,134,0.982,135,0.982,136,0.557,137,1.318,138,0.982,139,0.982,140,0.982,141,0.982,142,0.982,143,0.982,144,0.982,145,0.982,146,0.982,147,0.982,148,0.982,149,0.982,150,0.982,151,0.982,152,0.982,153,0.982,154,0.982,155,0.982,156,0.982,157,0.982,158,0.557,159,0.982,160,0.982,161,0.557,162,0.982,163,0.557,164,0.982,165,0.557,166,0.982,167,0.557,168,0.557,169,0.982,170,0.557,171,0.557,172,0.557,173,0.557,174,0.557,175,3.536,176,0.557,177,2.004,178,0.557,179,0.557,180,1.004,181,0.982,182,2.53,183,0.982,184,0.982,185,0.407,186,0.982,187,1.318,188,1.109,189,0.982,190,0.557,191,0.557,192,1.318,193,0.557,194,0.407,195,0.557,196,0.982,197,0.557,198,0.764,199,1.59,200,1.59,201,0.407,202,0.982,203,0.557,204,0.557,205,0.557,206,0.557,207,0.982,208,0.557,209,0.557,210,0.557,211,0.557,212,0.557,213,0.557,214,0.557,215,0.557,216,0.557,217,0.407,218,0.557,219,0.557,220,0.557,221,0.557,222,0.557,223,0.557,224,0.557,225,0.557,226,0.557,227,1.59,228,0.557,229,0.982,230,0.557,231,1.318,232,0.557,233,0.557,234,0.557,235,0.982,236,0.557,237,1.815,238,0.557,239,1.59,240,0.557,241,0.414,242,0.557,243,0.982,244,0.557,245,0.982,246,0.557,247,0.557,248,0.557,249,0.557,250,0.718,251,0.982,252,0.557,253,0.982,254,0.557,255,0.557,256,0.557,257,2.165,258,0.557,259,2.004,260,0.557,261,0.557,262,0.557,263,0.557,264,0.557,265,0.557,266,0.557,267,0.557,268,1.318,269,0.982,270,0.557,271,0.982,272,0.557,273,0.982,274,0.557,275,0.557,276,1.318,277,0.557,278,2.303,279,1.318,280,0.557,281,0.557,282,0.557,283,0.982,284,0.982,285,0.982,286,0.982,287,0.557,288,0.982,289,0.557,290,0.557,291,0.557,292,0.557,293,0.557,294,0.557,295,0.557,296,0.557,297,0.557,298,0.557,299,0.557,300,0.982,301,0.557,302,0.557,303,0.557,304,1.59,305,0.557,306,0.557,307,0.557,308,0.557,309,0.982,310,0.557,311,0.557,312,0.557,313,0.557,314,0.557,315,0.027,316,0.027]],["title/coverage.html",[317,1.553]],["body/coverage.html",[0,0.947,1,1.664,4,1.265,5,1.934,19,1.265,20,0.103,64,0.947,69,1.664,70,1.664,198,1.265,315,0.094,316,0.094,317,1.664,318,3.006,319,2.197,320,3.495,321,3.006,322,3.006,323,2.197,324,2.197]],["title/dependencies.html",[325,1.805,326,1.841]],["body/dependencies.html",[3,1.696,12,1.29,20,0.105,24,1.696,28,1.696,44,1.696,315,0.096,316,0.096,326,2.239,327,3.064,328,3.064,329,3.064,330,3.064]],["title/index.html",[14,0.76,49,0.76,241,0.76]],["body/index.html",[3,0.946,10,1.773,11,2.06,12,1.619,13,2.06,14,1.021,19,1.291,20,0.111,21,2.666,23,2.629,24,0.946,26,1.249,27,2.459,28,2.079,30,1.342,35,2.529,44,1.991,48,1.56,52,1.364,53,1.342,57,1.56,59,1.342,60,2.242,61,2.06,62,1.773,63,1.342,64,0.888,65,1.342,66,1.773,68,0.946,70,1.957,72,2.06,77,1.773,84,2.798,85,1.773,86,1.249,87,1.249,88,1.773,89,1.773,90,1.773,91,1.249,92,0.946,93,1.249,94,1.249,95,1.249,96,1.249,98,1.773,103,1.249,104,1.773,105,1.249,112,1.249,113,1.249,114,1.249,126,1.249,194,1.249,198,1.457,201,1.249,217,1.249,241,0.72,250,2.242,315,0.066,316,0.066,331,2.426,332,1.71,333,1.71,334,1.71,335,0.946,336,1.71,337,1.71,338,1.71,339,2.819,340,2.426,341,1.71,342,1.71,343,3.24,344,1.71,345,1.71,346,2.426,347,1.71,348,1.71,349,2.819,350,1.71,351,1.71,352,1.71,353,2.426,354,1.71,355,2.819,356,2.426,357,1.71,358,1.71,359,1.71,360,2.819,361,2.426,362,1.71,363,2.426,364,1.71,365,1.71,366,1.71,367,1.71,368,2.426,369,1.71,370,1.71,371,1.71,372,1.71,373,1.71,374,1.71,375,1.71,376,1.71,377,1.71,378,0.946,379,1.249]],["title/license.html",[49,0.76,241,0.76,378,0.999]],["body/license.html",[4,1.086,20,0.086,52,1.342,64,0.813,68,1.428,185,2.529,315,0.086,316,0.086,378,1.428,379,1.886,380,3.462,381,2.581,382,2.581,383,3.189,384,2.581,385,2.581,386,2.581,387,2.581,388,3.189,389,2.581,390,3.616,391,3.906,392,2.581,393,3.189,394,3.462,395,2.581,396,3.189,397,2.581,398,2.581,399,2.581,400,2.581,401,2.581,402,2.581,403,2.581,404,2.581,405,2.581,406,2.581,407,2.581,408,2.581,409,2.581,410,3.189,411,3.189,412,2.581,413,2.581,414,2.581,415,3.189,416,2.581,417,2.581,418,2.581,419,2.581,420,2.581,421,2.581,422,2.581,423,2.581,424,2.581,425,2.581,426,2.581,427,2.581,428,2.581,429,2.581,430,2.581,431,2.581,432,2.581,433,2.581,434,2.581,435,2.581,436,2.581,437,2.581,438,2.581]],["title/modules.html",[335,1.553]],["body/modules.html",[20,0.097,315,0.097,316,0.097,335,1.746]],["title/overview.html",[439,2.05]],["body/overview.html",[0,0.984,20,0.097,69,1.729,92,1.977,315,0.097,316,0.097,439,2.283]],["title/miscellaneous/typealiases.html",[440,1.319,441,2.52]],["body/miscellaneous/typealiases.html",[0,1.061,5,1.561,12,1.514,14,1.417,19,1.514,20,0.104,30,1.561,31,2.061,32,2.061,34,2.061,42,2.061,46,2.061,48,1.991,49,1.187,50,2.061,51,2.061,52,1.187,53,1.561,54,2.061,55,2.061,56,2.061,57,1.561,58,2.061,59,1.991,63,1.561,64,0.889,65,1.991,180,1.863,315,0.091,316,0.091,440,2.061,442,2.82,443,3.598]],["title/unit-test.html",[188,1.266,444,1.671]],["body/unit-test.html",[4,1.296,20,0.096,180,1.704,188,1.704,198,1.296,315,0.096,316,0.096,317,1.704,319,2.25,323,2.25,324,2.25,444,2.25,445,3.079,446,3.079]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["0",{"_index":89,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["0.5.9",{"_index":330,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":92,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"overview.html":{}}}],["1.11.0",{"_index":328,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":88,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["100",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":220,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["15.1.1",{"_index":327,"title":{},"body":{"dependencies.html":{}}}],["2018",{"_index":382,"title":{},"body":{"license.html":{}}}],["3/3",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["6.0",{"_index":345,"title":{},"body":{"index.html":{}}}],["_index",{"_index":286,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["_type",{"_index":288,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["abov",{"_index":409,"title":{},"body":{"license.html":{}}}],["action",{"_index":432,"title":{},"body":{"license.html":{}}}],["add",{"_index":349,"title":{},"body":{"index.html":{}}}],["alias",{"_index":442,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alway",{"_index":306,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["and/or",{"_index":402,"title":{},"body":{"license.html":{}}}],["any).id",{"_index":277,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["apivers",{"_index":344,"title":{},"body":{"index.html":{}}}],["aris",{"_index":436,"title":{},"body":{"license.html":{}}}],["array",{"_index":274,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["assign",{"_index":189,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["associ",{"_index":392,"title":{},"body":{"license.html":{}}}],["async",{"_index":253,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["author",{"_index":425,"title":{},"body":{"license.html":{}}}],["await",{"_index":295,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["basenam",{"_index":82,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["basic",{"_index":341,"title":{},"body":{"index.html":{}}}],["bodi",{"_index":273,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["body.length",{"_index":292,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["body.push",{"_index":290,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["body.push(docu",{"_index":291,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["boolean",{"_index":309,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["branch",{"_index":445,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":63,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["builder",{"_index":358,"title":{},"body":{"index.html":{}}}],["buildtags(commontag",{"_index":119,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["c",{"_index":381,"title":{},"body":{"license.html":{}}}],["catch",{"_index":303,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["certain",{"_index":50,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["chang",{"_index":278,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["charg",{"_index":387,"title":{},"body":{"license.html":{}}}],["claim",{"_index":428,"title":{},"body":{"license.html":{}}}],["class",{"_index":69,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"overview.html":{}}}],["client",{"_index":26,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["client(clientopt",{"_index":233,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["clientopt",{"_index":202,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["clock",{"_index":29,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["clock=new",{"_index":211,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["collect",{"_index":266,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["combin",{"_index":100,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["commontag",{"_index":103,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["commontags.foreach((tag",{"_index":121,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["compil",{"_index":364,"title":{},"body":{"index.html":{}}}],["compos",{"_index":362,"title":{},"body":{"index.html":{}}}],["comput",{"_index":352,"title":{},"body":{"index.html":{}}}],["condit",{"_index":408,"title":{},"body":{"license.html":{}}}],["config",{"_index":203,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["configopt",{"_index":27,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["connect",{"_index":438,"title":{},"body":{"license.html":{}}}],["consol",{"_index":193,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["const",{"_index":84,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["construct",{"_index":204,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["constructor",{"_index":216,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["contract",{"_index":433,"title":{},"body":{"license.html":{}}}],["copi",{"_index":390,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":380,"title":{},"body":{"license.html":{}}}],["count",{"_index":126,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["counter",{"_index":30,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["counter.getcount",{"_index":127,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["counteronlydocumentbuild",{"_index":356,"title":{},"body":{"index.html":{}}}],["coverag",{"_index":317,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":201,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["current",{"_index":178,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["dailyindex(basenam",{"_index":83,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["damag",{"_index":429,"title":{},"body":{"license.html":{}}}],["data",{"_index":250,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["date",{"_index":61,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["date(this.clock.time().millisecond",{"_index":258,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["date.getd",{"_index":86,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["date.getfullyear",{"_index":94,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["date.getmonth",{"_index":91,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["day",{"_index":85,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["dayprefix",{"_index":87,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["dayprefix}${day",{"_index":96,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["dd",{"_index":80,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["deal",{"_index":393,"title":{},"body":{"license.html":{}}}],["defaultdocumentbuild",{"_index":102,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["defaulttypedetermin",{"_index":76,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["depend",{"_index":326,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["determin",{"_index":177,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["dev",{"_index":359,"title":{},"body":{"index.html":{}}}],["differ",{"_index":270,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["discov",{"_index":377,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":400,"title":{},"body":{"license.html":{}}}],["docker",{"_index":361,"title":{},"body":{"index.html":{}}}],["document",{"_index":64,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["e.g",{"_index":56,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["each",{"_index":196,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["elasticsearch",{"_index":28,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{},"index.html":{}}}],["elasticsearchmetricreport",{"_index":70,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"index.html":{}}}],["elasticsearchmetricreporter(reporterconfig",{"_index":348,"title":{},"body":{"index.html":{}}}],["elasticsearchmetricreporter.buildtags(commontag",{"_index":112,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["elasticsearchmetricreporter.dailyindex(\"metr",{"_index":218,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["elasticsearchmetricreporter.defaultdocumentbuild",{"_index":217,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["elasticsearchmetricreporter.defaulttypedetermin",{"_index":219,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["elasticsearchmetricreporter.getcountervalues(metr",{"_index":107,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["elasticsearchmetricreporter.getgaugevalue(metr",{"_index":111,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["elasticsearchmetricreporter.gethistogramvalues(metr",{"_index":108,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["elasticsearchmetricreporter.getmetervalues(metr",{"_index":109,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["elasticsearchmetricreporter.getmonotonecountervalues(metr",{"_index":106,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["elasticsearchmetricreporter.gettimervalues(metr",{"_index":110,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["emtric",{"_index":54,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["entri",{"_index":7,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["enumer",{"_index":46,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["error",{"_index":301,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["etc",{"_index":58,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["even",{"_index":214,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["event",{"_index":424,"title":{},"body":{"license.html":{}}}],["export",{"_index":47,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["express",{"_index":417,"title":{},"body":{"license.html":{}}}],["extend",{"_index":71,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["extens",{"_index":67,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["failur",{"_index":191,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":420,"title":{},"body":{"license.html":{}}}],["follow",{"_index":407,"title":{},"body":{"license.html":{}}}],["free",{"_index":386,"title":{},"body":{"license.html":{}}}],["function",{"_index":180,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["furnish",{"_index":405,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":31,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["gauge.getvalu",{"_index":131,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["gener",{"_index":354,"title":{},"body":{"index.html":{}}}],["get",{"_index":49,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["getcountervalues(count",{"_index":129,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["getgaugevalue(gaug",{"_index":130,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["gethistogramvalues(histogram",{"_index":133,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["getlog",{"_index":238,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["getmetervalues(met",{"_index":158,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["getmonotonecountervalues(count",{"_index":125,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["getnumber(valu",{"_index":176,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["gettag",{"_index":234,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["gettimervalues(tim",{"_index":168,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["given",{"_index":207,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["gonna",{"_index":206,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["grafana",{"_index":367,"title":{},"body":{"index.html":{}}}],["grant",{"_index":385,"title":{},"body":{"license.html":{}}}],["graph",{"_index":372,"title":{},"body":{"index.html":{}}}],["group",{"_index":98,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["haschanged(metricid",{"_index":310,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["herebi",{"_index":384,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":32,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["histogram.getcount",{"_index":134,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["histogram.getsnapshot",{"_index":136,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["holder",{"_index":426,"title":{},"body":{"license.html":{}}}],["host",{"_index":346,"title":{},"body":{"index.html":{}}}],["http://elasticsearch:9200",{"_index":371,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":369,"title":{},"body":{"index.html":{}}}],["http://localhost:5601",{"_index":375,"title":{},"body":{"index.html":{}}}],["identifi",{"_index":318,"title":{},"body":{"coverage.html":{}}}],["impli",{"_index":418,"title":{},"body":{"license.html":{}}}],["import",{"_index":23,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["includ",{"_index":185,"title":{},"body":{"interfaces/MetricEntry.html":{},"license.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["indexnam",{"_index":77,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["indexnamedetermin",{"_index":199,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["indexnamegener",{"_index":353,"title":{},"body":{"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["inform",{"_index":51,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["inspector",{"_index":44,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":339,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":13,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["instanceof",{"_index":105,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["interv",{"_index":182,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["interval=1000",{"_index":208,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["isnan(count",{"_index":128,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["isnan(valu",{"_index":132,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["js",{"_index":338,"title":{},"body":{"index.html":{}}}],["key",{"_index":118,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["kibana",{"_index":374,"title":{},"body":{"index.html":{}}}],["kind",{"_index":416,"title":{},"body":{"license.html":{}}}],["last",{"_index":9,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["lastmodifiedfunct",{"_index":269,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["lastmodifiedfunction(metr",{"_index":281,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["lastreport",{"_index":16,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["lastvalu",{"_index":17,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["liabil",{"_index":430,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":427,"title":{},"body":{"license.html":{}}}],["lib/.../elasticsearchmetricreporter.t",{"_index":443,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/metrics/elasticsearchmetricreporter.t",{"_index":5,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["librari",{"_index":332,"title":{},"body":{"index.html":{}}}],["licens",{"_index":378,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":396,"title":{},"body":{"license.html":{}}}],["line",{"_index":446,"title":{},"body":{"unit-test.html":{}}}],["line:vari",{"_index":285,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["link",{"_index":73,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["localhost:9200",{"_index":347,"title":{},"body":{"index.html":{}}}],["log",{"_index":192,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["logger",{"_index":33,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["logmetadata",{"_index":190,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["loop",{"_index":242,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["made",{"_index":333,"title":{},"body":{"index.html":{}}}],["map",{"_index":24,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{},"index.html":{}}}],["match",{"_index":316,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["meant",{"_index":336,"title":{},"body":{"index.html":{}}}],["memberof",{"_index":45,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["merchant",{"_index":419,"title":{},"body":{"license.html":{}}}],["merg",{"_index":399,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":55,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["meter",{"_index":34,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["meter.getcount",{"_index":159,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metric",{"_index":12,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metric.getcount",{"_index":357,"title":{},"body":{"index.html":{}}}],["metric.getgroup",{"_index":114,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["metric.getnam",{"_index":113,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["metricdocumentbuild",{"_index":65,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metricentri",{"_index":1,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{}}}],["metricentry.lastreport",{"_index":314,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metricentry.lastvalu",{"_index":313,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metricid",{"_index":276,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metricinfodetermin",{"_index":59,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metricregistri",{"_index":35,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["metricreport",{"_index":36,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metrics.foreach((metr",{"_index":275,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metricst",{"_index":197,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metrictyp",{"_index":48,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["millisecond",{"_index":37,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minim",{"_index":183,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minimum",{"_index":307,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minreportingtimeout",{"_index":186,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minreportingtimeout=1",{"_index":212,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minut",{"_index":38,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minute.convertto(minreportingtimeout",{"_index":230,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["miscellan",{"_index":440,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":379,"title":{},"body":{"index.html":{},"license.html":{}}}],["mm",{"_index":79,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["modifi",{"_index":398,"title":{},"body":{"license.html":{}}}],["modul",{"_index":335,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monoton",{"_index":124,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["monotonecount",{"_index":39,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["month",{"_index":90,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["monthprefix",{"_index":93,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["monthprefix}${month",{"_index":95,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["mostli",{"_index":117,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["name",{"_index":57,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["navig",{"_index":368,"title":{},"body":{"index.html":{}}}],["need",{"_index":355,"title":{},"body":{"index.html":{}}}],["new",{"_index":198,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["next",{"_index":284,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["node",{"_index":334,"title":{},"body":{"index.html":{}}}],["nodejs.it",{"_index":337,"title":{},"body":{"index.html":{}}}],["nodejs.tim",{"_index":181,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["noninfring",{"_index":423,"title":{},"body":{"license.html":{}}}],["notic",{"_index":410,"title":{},"body":{"license.html":{}}}],["now",{"_index":257,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["npm",{"_index":340,"title":{},"body":{"index.html":{}}}],["null",{"_index":104,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["number",{"_index":18,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["object",{"_index":97,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["obtain",{"_index":389,"title":{},"body":{"license.html":{}}}],["otherwis",{"_index":435,"title":{},"body":{"license.html":{}}}],["out",{"_index":437,"title":{},"body":{"license.html":{}}}],["overview",{"_index":439,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":325,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":81,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["paramet",{"_index":99,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["particular",{"_index":421,"title":{},"body":{"license.html":{}}}],["pattern",{"_index":376,"title":{},"body":{"index.html":{}}}],["permiss",{"_index":383,"title":{},"body":{"license.html":{}}}],["permit",{"_index":404,"title":{},"body":{"license.html":{}}}],["person",{"_index":388,"title":{},"body":{"license.html":{}}}],["playground",{"_index":360,"title":{},"body":{"index.html":{}}}],["playground/playground.shview",{"_index":366,"title":{},"body":{"index.html":{}}}],["point",{"_index":251,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["portion",{"_index":413,"title":{},"body":{"license.html":{}}}],["privat",{"_index":175,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["promis",{"_index":271,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["properti",{"_index":15,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["provid",{"_index":414,"title":{},"body":{"license.html":{}}}],["public",{"_index":75,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["publish",{"_index":68,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"license.html":{}}}],["purpos",{"_index":422,"title":{},"body":{"license.html":{}}}],["reach",{"_index":308,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["read",{"_index":115,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reason",{"_index":304,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["refer",{"_index":22,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["regist",{"_index":252,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["registri",{"_index":60,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["registry.getcounterlist",{"_index":261,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["registry.getgaugelist",{"_index":262,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["registry.gethistogramlist",{"_index":263,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["registry.getmeterlist",{"_index":264,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["registry.getmonotonecounterlist",{"_index":260,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["registry.gettimerlist",{"_index":265,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["report",{"_index":21,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["reporter.addmetricregistry(registri",{"_index":350,"title":{},"body":{"index.html":{}}}],["reporter.gettag",{"_index":116,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reporter.start();determin",{"_index":351,"title":{},"body":{"index.html":{}}}],["reporterconfig",{"_index":343,"title":{},"body":{"index.html":{}}}],["reportmetr",{"_index":272,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reportmetricregistry(registri",{"_index":256,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["respons",{"_index":294,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["response.error",{"_index":302,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["response.took}m",{"_index":299,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["restrict",{"_index":395,"title":{},"body":{"license.html":{}}}],["result",{"_index":315,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["return",{"_index":72,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["right",{"_index":397,"title":{},"body":{"license.html":{}}}],["run",{"_index":363,"title":{},"body":{"index.html":{}}}],["save",{"_index":194,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["schedul",{"_index":179,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["script",{"_index":365,"title":{},"body":{"index.html":{}}}],["sell",{"_index":403,"title":{},"body":{"license.html":{}}}],["send",{"_index":213,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["set",{"_index":235,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["setinterv",{"_index":243,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["setlog(log",{"_index":240,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["settags(tag",{"_index":236,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["shall",{"_index":411,"title":{},"body":{"license.html":{}}}],["snapshot",{"_index":135,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["softwar",{"_index":391,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{},"index.html":{}}}],["specif",{"_index":101,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["specifi",{"_index":53,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":241,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["state",{"_index":195,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["statement",{"_index":319,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":74,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["stdclock",{"_index":40,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["stop",{"_index":248,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["stopp",{"_index":247,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["string",{"_index":62,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["subject",{"_index":406,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":401,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":412,"title":{},"body":{"license.html":{}}}],["super",{"_index":221,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["support",{"_index":329,"title":{},"body":{"dependencies.html":{}}}],["support/regist",{"_index":25,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["t",{"_index":268,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tabl",{"_index":324,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":323,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":66,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["taggabl",{"_index":41,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["taggable.gettags().foreach((tag",{"_index":123,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tags=new",{"_index":210,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tags[key",{"_index":122,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["templat",{"_index":267,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["test",{"_index":444,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["that'",{"_index":205,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.client",{"_index":232,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.client.bulk",{"_index":296,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.clock",{"_index":228,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":161,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":163,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":165,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":167,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":147,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":149,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":151,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":155,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":153,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":139,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":141,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":145,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":143,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":157,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":171,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":172,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":173,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":174,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.haschanged(metricid",{"_index":280,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.indexnamedetermin",{"_index":222,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.indexnamedeterminator(registri",{"_index":287,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.interv",{"_index":225,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.log",{"_index":239,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.log.debug",{"_index":297,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.log.error(`error",{"_index":305,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.logmetadata",{"_index":231,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.metricdocumentbuild",{"_index":224,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.metricdocumentbuilder(registri",{"_index":282,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.metricregistries.foreach((registri",{"_index":254,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.metricstates.get(metricid",{"_index":312,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.metricstates.has(metricid",{"_index":311,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.minreportingtimeout",{"_index":229,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.report",{"_index":246,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetricregistry(registri",{"_index":255,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetrics(registri",{"_index":259,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.tag",{"_index":227,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.tim",{"_index":245,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.timer.unref",{"_index":249,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.typedetermin",{"_index":223,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.typedeterminator(registri",{"_index":289,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.unit",{"_index":226,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.unit.convertto(this.interv",{"_index":244,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["time",{"_index":187,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timeout",{"_index":184,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timer",{"_index":42,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["timer.getcount",{"_index":169,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timer.getsnapshot",{"_index":170,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timestamp",{"_index":11,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["timeunit",{"_index":43,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["took",{"_index":298,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tort",{"_index":434,"title":{},"body":{"license.html":{}}}],["track",{"_index":8,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tri",{"_index":293,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["true",{"_index":279,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tslint:dis",{"_index":283,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":441,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedetermin",{"_index":200,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["typescript",{"_index":331,"title":{},"body":{"index.html":{}}}],["unchang",{"_index":215,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["unit",{"_index":188,"title":{"unit-test.html":{}},"body":{"interfaces/MetricEntry.html":{},"unit-test.html":{}}}],["unit=millisecond",{"_index":209,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["url",{"_index":370,"title":{},"body":{"index.html":{}}}],["us",{"_index":52,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["usag",{"_index":342,"title":{},"body":{"index.html":{}}}],["valu",{"_index":10,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["values[`count",{"_index":137,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`m15_r",{"_index":160,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`m1_r",{"_index":162,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`m5_r",{"_index":164,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`max",{"_index":138,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`mean",{"_index":140,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`mean_r",{"_index":166,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`min",{"_index":142,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`p50",{"_index":144,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`p75",{"_index":146,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`p95",{"_index":148,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`p98",{"_index":150,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`p99",{"_index":152,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`p999",{"_index":154,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["values[`stddev",{"_index":156,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["view",{"_index":373,"title":{},"body":{"index.html":{}}}],["void",{"_index":237,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["warranti",{"_index":415,"title":{},"body":{"license.html":{}}}],["whether",{"_index":431,"title":{},"body":{"license.html":{}}}],["without",{"_index":394,"title":{},"body":{"license.html":{}}}],["write",{"_index":300,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["x",{"_index":120,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["yyyi",{"_index":78,"title":{},"body":{"interfaces/MetricEntry.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/MetricEntry.html":{"url":"interfaces/MetricEntry.html","title":"interface - MetricEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/ElasticsearchMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Entry interface to track the last value and timestamp of a metric instance.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastReport\n                                \n                                \n                                        lastValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastReport\n                                    \n                                \n                                \n                                    \n                                        lastReport:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Timestamp of the last reporting.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValue\n                                    \n                                \n                                \n                                    \n                                        lastValue:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Last reported reference value.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Client, ConfigOptions } from \"elasticsearch\";\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    MonotoneCounter,\n    StdClock,\n    Taggable,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Entry interface to track the last value and timestamp of a metric instance.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * Timestamp of the last reporting.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n\n    /**\n     * Last reported reference value.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * Enumeration of all metric types.\n */\nexport type MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\";\n\n/**\n * Interface for getting a certain information using the specified emtric metadata -\n * e.g. name of the index, metric type, etc.\n */\nexport type MetricInfoDeterminator = (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => string;\n\n/**\n * Interface for building a document for a metric.\n */\nexport type MetricDocumentBuilder = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    date: Date,\n    tags: Map) => {};\n\n/**\n * A MetricReporter extension used to publish metric values to elasticsearch.\n *\n * @export\n * @class ElasticsearchMetricReporter\n * @extends {MetricReporter}\n */\nexport class ElasticsearchMetricReporter extends MetricReporter {\n\n    /**\n     * Returns a {@link MetricInfoDeterminator} that returns 'metric' as type.\n     *\n     * @static\n     * @returns {MetricInfoDeterminator}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static defaultTypeDeterminator(): MetricInfoDeterminator {\n        return (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => \"metric\";\n    }\n\n    /**\n     * Returns a {@link MetricInfoDeterminator} that returns an indexname like '-yyyy-mm-dd'.\n     *\n     * @static\n     * @param {string} baseName The\n     * @returns {MetricInfoDeterminator}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static dailyIndex(baseName: string): MetricInfoDeterminator {\n        return (registry: MetricRegistry, metric: Metric, type: MetricType, date: Date) => {\n            const day = date.getDate();\n            const dayPrefix: string = (day >= 10) ? \"\" : \"0\";\n            const month = date.getMonth() + 1;\n            const monthPrefix: string = (month >= 10) ? \"\" : \"0\";\n            return `${baseName}-${date.getFullYear()}-${monthPrefix}${month}-${dayPrefix}${day}`;\n        };\n    }\n\n    /**\n     * Returns a {@link MetricDocumentBuilder} that builds an object for a metric like this:\n     *\n     * {\n     *\n     *  name: ..., // name of metric\n     *\n     *  group: ..., // group of metric\n     *\n     *  timestamp: ..., // timestamp from parameter\n     *\n     *  tags: ..., // combined tags from this reporter and the metric\n     *\n     *  values..., // metric specific values\n     *\n     *  type..., // metric type\n     *\n     * }\n     *\n     * @static\n     * @returns {MetricDocumentBuilder}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static defaultDocumentBuilder(): MetricDocumentBuilder {\n        return (\n            registry: MetricRegistry,\n            metric: Metric,\n            type: MetricType,\n            timestamp: Date,\n            commonTags: Map) => {\n\n            let values = null;\n\n            if (metric instanceof MonotoneCounter) {\n                values = ElasticsearchMetricReporter.getMonotoneCounterValues(metric);\n            } else if (metric instanceof Counter) {\n                values = ElasticsearchMetricReporter.getCounterValues(metric);\n            } else if (metric instanceof Histogram) {\n                values = ElasticsearchMetricReporter.getHistogramValues(metric);\n            } else if (metric instanceof Meter) {\n                values = ElasticsearchMetricReporter.getMeterValues(metric);\n            } else if (metric instanceof Timer) {\n                values = ElasticsearchMetricReporter.getTimerValues(metric);\n            } else {\n                values = ElasticsearchMetricReporter.getGaugeValue(metric as Gauge);\n            }\n\n            if (values === null) {\n                return null;\n            }\n\n            const tags = ElasticsearchMetricReporter.buildTags(commonTags, metric);\n            const name = metric.getName();\n            const group = metric.getGroup();\n            return { name, group, tags, timestamp, values, type };\n        };\n    }\n\n    /**\n     * Combines all specified tags.\n     *\n     * @static\n     * @param {Map} commonTags - read-only tags from reporter - get with reporter.getTags().\n     * @param {Taggable} taggable - mostly a metric with tags.\n     * @returns {{ [key: string]: string }} Returns a key-value object with all tags combined.\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static buildTags(commonTags: Map, taggable: Taggable): { [key: string]: string } {\n        const tags: { [x: string]: string } = {};\n        commonTags.forEach((tag, key) => tags[key] = tag);\n        taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        return tags;\n    }\n\n    /**\n     * Gets the values for the specified monotone counter metric.\n     *\n     * @static\n     * @param {MonotoneCounter} counter\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getMonotoneCounterValues(counter: MonotoneCounter): {} {\n        const count = counter.getCount();\n        if (!count || isNaN(count)) {\n            return null;\n        }\n        return { count };\n    }\n\n    /**\n     * Gets the values for the specified counter metric.\n     *\n     * @static\n     * @param {Counter} counter\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getCounterValues(counter: Counter): {} {\n        const count = counter.getCount();\n        if (!count || isNaN(count)) {\n            return null;\n        }\n        return { count };\n    }\n\n    /**\n     * Gets the values for the specified {Gauge} metric.\n     *\n     * @static\n     * @param {Gauge} gauge\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getGaugeValue(gauge: Gauge): {} {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        return { value };\n    }\n\n    /**\n     * Gets the values for the specified {Histogram} metric.\n     *\n     * @static\n     * @param {Histogram} histogram\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getHistogramValues(histogram: Histogram): {} {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const values: any = {};\n\n        values[`count`] = value;\n        values[`max`] = this.getNumber(snapshot.getMax());\n        values[`mean`] = this.getNumber(snapshot.getMean());\n        values[`min`] = this.getNumber(snapshot.getMin());\n        values[`p50`] = this.getNumber(snapshot.getMedian());\n        values[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        values[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        values[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        values[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        values[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        values[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return values;\n    }\n\n    /**\n     * Gets the values for the specified {Meter} metric.\n     *\n     * @static\n     * @param {Meter} meter\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getMeterValues(meter: Meter): {} {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const values: any = {};\n\n        values[`count`] = value;\n        values[`m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        values[`m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        values[`m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        values[`mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return values;\n    }\n\n    /**\n     * Gets the values for the specified {Timer} metric.\n     *\n     * @static\n     * @param {Timer} timer\n     * @returns {{}}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public static getTimerValues(timer: Timer): {} {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const values: any = {};\n\n        values[`count`] = value;\n        values[`m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        values[`m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        values[`m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        values[`max`] = this.getNumber(snapshot.getMax());\n        values[`mean`] = this.getNumber(snapshot.getMean());\n        values[`mean_rate`] = this.getNumber(timer.getMeanRate());\n        values[`min`] = this.getNumber(snapshot.getMin());\n        values[`p50`] = this.getNumber(snapshot.getMedian());\n        values[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        values[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        values[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        values[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        values[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        values[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return values;\n    }\n\n    /**\n     * Either gets 0 or the specifed value.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private static getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n    /**\n     * Clock used to determine the current timestamp.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Reference for the object returned by the scheduler function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Reporting interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private interval: number;\n    /**\n     * Minimal timeout to include a metric instance into a reporting.\n     *\n     * @private\n     * @type {number}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Time unit for the reporting interval.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private unit: TimeUnit;\n    /**\n     * Tags assigned to this reporter instance - reported for every metric instance.\n     *\n     * @private\n     * @type {Map}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @private\n     * @type {Logger}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private log: Logger = console;\n    /**\n     * Saves the state of each reported metrics.\n     *\n     * @private\n     * @type {Map}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private metricStates: Map = new Map();\n    /**\n     * Elasticsearch client used to do reporting.\n     *\n     * @private\n     * @type {Client}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private client: Client;\n    /**\n     * Used to get the name of the index.\n     *\n     * @private\n     * @type {MetricInfoDeterminator}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private indexnameDeterminator: MetricInfoDeterminator;\n    /**\n     * Used to get the type of the metric instance.\n     *\n     * @private\n     * @type {MetricInfoDeterminator}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private typeDeterminator: MetricInfoDeterminator;\n    /**\n     * Used to build the document for a metric.\n     *\n     * @private\n     * @type {MetricDocumentBuilder}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private metricDocumentBuilder: MetricDocumentBuilder;\n\n    /**\n     * Creates an instance of ElasticsearchMetricReporter.\n     *\n     * @param {ConfigOptions} clientOptions Elasticsearch client config.\n     * @param [metricDocumentBuilder] A function that constructs an object of a metric that's gonna be indexed.\n     * @param [indexnameDeterminator] A function that determines the name of the index for a given metric.\n     * @param [typeDeterminator] A function that determines the name of the type for a given metric.\n     * @param {number} [interval=1000] The reporting interval.\n     * @param {TimeUnit} [unit=MILLISECOND] The time unit for the reporting interval.\n     * @param {Map} [tags=new Map()] Tags assigned to every metric.\n     * @param {Clock} [clock=new StdClock()] The clock - used to determine the timestamp of the metrics while reporting.\n     * @param {number} [minReportingTimeout=1] The time in minutes the reporter sends even unchanged metrics.\n     */\n    public constructor(\n        clientOptions: ConfigOptions,\n        metricDocumentBuilder: MetricDocumentBuilder = ElasticsearchMetricReporter.defaultDocumentBuilder(),\n        indexnameDeterminator: MetricInfoDeterminator = ElasticsearchMetricReporter.dailyIndex(\"metric\"),\n        typeDeterminator: MetricInfoDeterminator = ElasticsearchMetricReporter.defaultTypeDeterminator(),\n        interval: number = 1000,\n        unit: TimeUnit = MILLISECOND,\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.indexnameDeterminator = indexnameDeterminator;\n        this.typeDeterminator = typeDeterminator;\n        this.metricDocumentBuilder = metricDocumentBuilder;\n        this.interval = interval;\n        this.unit = unit;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n\n        this.logMetadata = {\n            interval,\n            tags,\n            unit,\n        };\n\n        this.client = new Client(clientOptions);\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @memberof ElasticsearchMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof ElasticsearchMetricReporter\n     */\n    public getLog(): Logger {\n        return this.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof ElasticsearchMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.log = log;\n    }\n\n    /**\n     * Starts the logger reporting loop using {setInterval()}.\n     *\n     * @memberof ElasticsearchMetricReporter\n     */\n    public start(): void {\n        const interval: number = this.unit.convertTo(this.interval, MILLISECOND);\n        this.timer = setInterval(() => this.report(), interval);\n    }\n\n    /**\n     * Stopps reporting metrics.\n     *\n     * @memberof ElasticsearchMetricReporter\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @private\n     * @memberof ElasticsearchMetricReporter\n     */\n    private async report() {\n        this.metricRegistries.forEach((registry) => this.reportMetricRegistry(registry));\n    }\n\n    /**\n     * Reports the data points for the specified {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} registry\n     * @memberof ElasticsearchMetricReporter\n     */\n    private reportMetricRegistry(registry: MetricRegistry): void {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        this.reportMetrics(registry, registry.getMonotoneCounterList(), now, \"counter\",\n            (counter: MonotoneCounter) => counter.getCount());\n        this.reportMetrics(registry, registry.getCounterList(), now, \"counter\",\n            (counter: Counter) => counter.getCount());\n        this.reportMetrics(registry, registry.getGaugeList(), now, \"gauge\",\n            (gauge: Gauge) => gauge.getValue());\n        this.reportMetrics(registry, registry.getHistogramList(), now, \"histogram\",\n            (histogram: Histogram) => histogram.getCount());\n        this.reportMetrics(registry, registry.getMeterList(), now, \"meter\",\n            (meter: Meter) => meter.getCount());\n        this.reportMetrics(registry, registry.getTimerList(), now, \"timer\",\n            (timer: Timer) => timer.getCount());\n    }\n\n    /**\n     * Reports a collection of metric instance for a certain type.\n     *\n     * @private\n     * @template T\n     * @param {MetricRegistry} registry\n     * @param {T[]} metrics\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {(metric: Metric) => number} lastModifiedFunction\n     *      function to determine if a metric has a different value since the last reporting.\n     * @returns {Promise}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private async reportMetrics(\n        registry: MetricRegistry,\n        metrics: T[],\n        date: Date,\n        type: MetricType,\n        lastModifiedFunction: (metric: Metric) => number): Promise {\n\n        const body: Array = [];\n        metrics.forEach((metric) => {\n            const metricId = (metric as any).id;\n            let changed = true;\n            if (metricId) {\n                changed = this.hasChanged(metricId, lastModifiedFunction(metric), date);\n            }\n\n            if (changed) {\n                const document = this.metricDocumentBuilder(registry, metric, type, date, this.tags);\n                if (!!document) {\n                    // tslint:disable-next-line:variable-name\n                    const _index = this.indexnameDeterminator(registry, metric, type, date);\n                    // tslint:disable-next-line:variable-name\n                    const _type = this.typeDeterminator(registry, metric, type, date);\n                    body.push({ index: { _index, _type } });\n                    body.push(document);\n                }\n            }\n        });\n\n        if (body.length > 0) {\n            try {\n                const response = await this.client.bulk({ body });\n                if (this.log) {\n                    this.log.debug(\n                        `took ${response.took}ms to write ${type} metrics - errors ${response.errors}`,\n                        this.logMetadata,\n                    );\n                }\n            } catch (reason) {\n                if (this.log) {\n                    this.log.error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                }\n            }\n        }\n    }\n\n    /**\n     * Determines if the specified metric has changed. This is always true if\n     * the minimum-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof ElasticsearchMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/ElasticsearchMetricReporter.ts\n            \n            \n                class\n            \n            \n                ElasticsearchMetricReporter\n            \n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                lib/metrics/ElasticsearchMetricReporter.ts\n            \n            \n                interface\n            \n            \n                MetricEntry\n            \n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            elasticsearch : ^15.1.1\n        \n            inspector-metrics : ^1.11.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-elasticsearch\nTypescript Metrics Reporter for\nelasticsearch.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with typescript / nodejs.It uses elasticsearch-js as elasticsearch client.\ninstall\nnpm install --save inspector-elasticsearch\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { ElasticsearchMetricReporter } from \"inspector-elasticsearch\";\nimport { ConfigOptions } from \"elasticsearch\";\n\nconst reporterConfig: ConfigOptions = {\n    apiVersion: \"6.0\",\n    host: \"localhost:9200\",\n};\n// instance the elasticsearch reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter(reporterConfig);\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();determine the indexname for a metric\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    ElasticsearchMetricReporter,\n    MetricInfoDeterminator\n} from \"inspector-elasticsearch\";\nimport { ConfigOptions } from \"elasticsearch\";\n\nconst reporterConfig: ConfigOptions = { ... };\n// computes the name of the index using the timestamp of the metric\nconst indexnameGenerator: MetricInfoDeterminator = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    date: Date) => {\n\n    const day = date.getDate();\n    const dayPrefix: string = (day >= 10) ? \"\" : \"0\";\n    const month = date.getMonth() + 1;\n    const monthPrefix: string = (month >= 10) ? \"\" : \"0\";\n    return `metrics-${date.getFullYear()}-${monthPrefix}${month}-${dayPrefix}${day}`;\n};\n// the indexname generator needs to be specified when instancing the reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter(\n    reporterConfig,\n    ElasticsearchMetricReporter.defaultDocumentBuilder(),\n    indexnameGenerator,\n);build a metric document\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    ElasticsearchMetricReporter,\n    MetricDocumentBuilder,\n    MetricType\n} from \"inspector-elasticsearch\";\nimport { ConfigOptions } from \"elasticsearch\";\n\nconst reporterConfig: ConfigOptions = { ... };\n// only build documents for counter metrics\nconst counterOnlyDocumentBuilder: MetricDocumentBuilder = (\n    registry: MetricRegistry,\n    metric: Metric,\n    type: MetricType,\n    timestamp: Date,\n    commonTags: Map) => {\n\n    if (metric instanceof Counter) {\n        const tags = ElasticsearchMetricReporter.buildTags(commonTags, metric);\n        const name = metric.getName();\n        const group = metric.getGroup();\n        return { name, group, tags, timestamp, values: { 'count': metric.getCount() }, type };\n\n    } else {\n        // null values will not be reported / published\n        return null;\n    }\n};\n\n// the document builder needs to be specified when instancing the reporter\nconst reporter: ElasticsearchMetricReporter = new ElasticsearchMetricReporter(\n    reporterConfig,\n    counterOnlyDocumentBuilder,\n);dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\nnpm run compile\n# running playground script\nplayground/playground.shview data in grafana\n\nNavigate to http://localhost:3000\nAdd a new Data Source (type: elasticsearch, host / url: http://elasticsearch:9200)\nCreate a new graph\n\n\nview data in kibana\n\nNavigate to http://localhost:5601\nAdd a new index pattern like metric-*\nDiscover data\n\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MetricDocumentBuilder   (lib/.../ElasticsearchMetricReporter.ts)\n                        \n                        \n                            MetricInfoDeterminator   (lib/.../ElasticsearchMetricReporter.ts)\n                        \n                        \n                            MetricType   (lib/.../ElasticsearchMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/ElasticsearchMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        MetricDocumentBuilder\n                    \n                \n                    \n                        \n                            Interface for building a document for a metric.\n\n                        \n                    \n                \n                    \n                        MetricDocumentBuilder:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        MetricInfoDeterminator\n                    \n                \n                    \n                        \n                            Interface for getting a certain information using the specified emtric metadata -\ne.g. name of the index, metric type, etc.\n\n                        \n                    \n                \n                    \n                        MetricInfoDeterminator:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        MetricType\n                    \n                \n                    \n                        \n                            Enumeration of all metric types.\n\n                        \n                    \n                \n                    \n                        MetricType:     \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\"\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
